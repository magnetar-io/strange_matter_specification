{
  "$schema": "https://github.com/magnetar-io/strange_matter_specification/blob/main/Component_Schema/v.9.01/Header_Schema/component.json",
  "title": "Component",
  "type": "object",
  "properties": {
    "ComponentType": {
      "type": "string",
      "pattern": "",
      "description": "A URI that hosts the component definitions for things like Enums of ComponentClassification, Payloads Etc. This Mockup is in JSON Schema, but it could be any valid choice for definitions",
      "examples": [".../v.9.01/component.strangematter.id"]
    },
    "ComponentHash": {
      "type": "string",
      "pattern": "",
      "description": "A Hash of the Component Definition Schema so you don't ever need to look to the URI to compare versions",
      "examples": ["909D9FA8328A39BE246E5281B9E7CCFB"]
    },
    "AuthorIdentifier": {
      "type": "string",
      "format": "email",
      "description": "The email address of the author of the component",
      "examples": ["greg.schleusner@hok.com"]
    },
    "Context": {
      "type": "string",
      "pattern": "^",
      "description": "The context of the data set that the component was created in",
      "examples": ["myprojectdata.ifc5"]
    },
    "Function": {
      "type": "string",
      "enum": [
        "Instance",
        "Typical",
        "Archetype",
        "Relationship",
        "Group",
        "Collection"
      ],
      "description": "How the Component is being used.  This should not be a Type, but use for indicating its use when comparing it to how other data uses it in the 'includes' value",
      "examples": ["Instance"]
    },
    "Using": {
      "type": "array",
      "description": "To create a graph of data that the authur potentially doesn't control, its necessary to be able to references other data. For validation and ease of traversal it needs to be expressive such that the IDs are Prefixed with a 'how I'm using' the component indicator. So by including an Architype (ART), the authur is saying I see this as a Requirement Object, not one that should hold any data, and that a Typical (TPC) entity is going to be used multiple times Etc.  They can be combined as needed as prefixes, but the general patterns should be Funtion,then IDs, include a version. ",
      "items": {
        "type": "string",
        "funtion enum ": [
          "ACT", //Archetype 
          "TPC", //Typical
          "INT", //Instance
          "ENT", //Entitiy
          "COM", //Component
          "VER" //Version 
        ],
        "pattern": ""
      },
      "examples": [
        "ACT:ENT:0123456789abcdef", // This [Component] is [Using], the [Entity with ID...] as a [Archetype]
        "TPC:ENT:89abcdef0123456789abcdef", //This [Component] is [Using], the [Entity with ID...] as a [Typical]
        "ACT:COM:0123456789abcdef", //This [Component is [Using], the [Component with ID...] as a [Archetype]
        "ACT:COM:0123456789abcdef:VER:0123456789abcdef", //This [Component] is[Using], the [Component with ID...] and [Version with ID...] as a [Archetype]
        "TPC:COM:fedcba9876543210", //This [Component] is [Using], the [Component with ID...] as a [Typcial]
        "TPC:COM:fedcba9876543210:VER:abcdef0123456789" // This [Component] is [Using], the [Component with ID...] and [Version with ID...] as a [Typcial]
      ]
    },
    "Action": {
      "type": "array",
      "description": "This is still WIP in progress but to make changes in data machine readable and machine executable its nessesary to indicate what this new component is doing to another component.  So we need to encode an action in the data and not externally.  ",
      "items": {
        "type": "string",
        "enum ": [
          "AGM", //Augment
          "OVR", //Overide
          "MOD", //Modify (I don't think its needed)
          "RMV",  //Remove (is there a "empty componenet" needed to delete something?)
          "" //Future
          ],
        "pattern": ""
      },
      "examples": [
        "AGM:ENT:SELF", // This [Component], [Augments] the [Entity]
        "AGM:ENT:89abcdef0123456789abcdef", // This [Component], [Augments] the [Entity with ID...]
        "OVR:ENT:89abcdef0123456789abcdef", // The [Entity] that this[Component] is a part of , [Overides] the [Entity with ID...]
        "OVR:COM:0123456789abcdef:VER:0123456789abcdef", // This [Component], [Overides] the [Component with ID...] and [Version with ID...]
        "RMV:COM:0123456789abcdef", // This [Component], [Removes] the [Component with ID...]
        "RMV:ENT:0123456789abcdef" // This [Component], [Removes] the [Entity with ID...]
      ]
    },
    "GraphID": {
      "type": "string",
      "description": "WIP, but if the data broken into pieces and wants to be stored in a database its worthwhile to be able to group it as being part of a subgraph of data.",
      "pattern": "",
      "examples": ["01HZCVEB7Z25PDNM32QFW5P6EB"]
    },
    "EntityGUID": {
      "type": "string",
      "pattern": "",
      "examples": ["01HZCVEB7Z25PDNM32QFW5P6EB"]
    },
    "ComponentGUID": {
      "type": "string",
      "pattern": "",
      "examples": ["1823e736a75e4c3da13ba8c9e16def22"]
    },
    "ComponentVersionGUID": {
      "type": "string",
      "pattern": "",
      "examples": ["45be6d643a6f49b8a26d75dc2ea41e0b"]
    },
    "DateCreated": {
      "type": "string",
      "format": "date-time",
      "description": "The creation date and time in ISO 8601 format.",
      "examples": ["2024-06-02T13:05:48.134Z"]
    },
    "LastModified": {
      "type": "string",
      "format": "date-time",
      "description": "The date and time the component was last modified, in ISO 8601 format.",
      "examples": ["2024-06-14T09:00:00.000Z"]
    },
    "Name": {
      "type": "string",
      "examples": ["Example Name"]
    },
    "HashDefinition": {
      "type": "string",
      "enum": ["MD5"],
      "examples": ["MD5"]
    },
    "PayloadHash": {
      "type": "string",
      "pattern": "",
      "examples": ["D41D8CD98F00B204E9800998ECF8427E"]
    },
    "PayloadDataType": {
      "description": "The data type of the payload.",
      "type": "string",
      "enum": ["json", "geojson"],
      "examples": ["json"]
    },
    "Payload": {
      "type": ["array", "null"],
      "items": { "type": "object" },
      "examples": [{}]
    }
  },
  "required": [
    "ComponentType",
    "ComponentHash",
    "AuthorIdentifier",
    "Context",
    "Function",
    "ComponentClassification",
    "EntityGUID",
    "ComponentGUID",
    "ComponentVersion2Guid",
    "DateCreated",
    "LastModified",
    "HashDefinition",
    "PayloadHash",
    "PayloadDataType"
  ]
}
